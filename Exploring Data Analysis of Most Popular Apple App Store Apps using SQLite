--The first step I completed in this project was creating the table appleStore_description in the SQLite database and combine all data from each data set into a single unified table:

CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1 

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4;

Exploratory Data Analysis: 

--In this project I used Exploratory Data Analysis or EDA to understand the characteristics of the data, data structure and find any lingering issues in the data to perform an analysis on this data properly.  

	*Check the number of unique apps in both tablesAppleStore*

SELECT COUNT(DISTINCT id) AS UniqueAppIDs

FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIDs

FROM appleStore_description_combined 

Unique AppIDs found from both tables= 7197

*Check for any missing values in key fields*

SELECT COUNT (*) AS MissingValues
	
FROM AppleStore
	
WHERE track_name IS NULL OR user_rating IS NULL OR prime_genre IS NULL

	Missing values in AppleStore table= 0

SELECT COUNT (*) AS MissingValues
	
FROM appleStore_description_combined
	
WHERE app_desc IS NULL

	Missing values in appleStore_description_combined table= 0

--Upon an exploratory data analysis of both tables AppleStore and appleStore_description_combined I found that the data has no errors or “NULL” values where data is missing. I also discovered that there is the same number of unique applications in both datasets which mean there is no missing values between the two tables.

*Find the number of apps per genre*

SELECT prime_genre, COUNT(*) AS NumApps

FROM AppleStore

GROUP BY prime_genre

ORDER BY NumApps DESC 

*Get an overview of the apps ratings*

SELECT min(user_rating) AS MinRating,
	max(user_rating) AS MaxRating,
	avg(user_rating) AS AvgRating

FROM AppleStore

--The application ratings from the Apple Store table within the SQLite database I created shows that the minimum user rating of apps has a value of 0, the max user rating has a value of 5 and the average user rating for all the apps in the Apple App Store is around 3.5. Games, Entertainment and Educations apps are the top 3 leaders in the Apple Store among every type of application. Games has an amount of 3862 apps, Entertainment has 534 apps and Education has 453. This shows that these type of app genres are “prime” genres within the Apple App Store.

--Data Analysis:

--In this stage of this SQL project, I am using data analysis to find insightful information for the app developer.


*Determine whether paid apps have higher ratings than free apps*

SELECT CASE

WHEN price > 0 THEN ‘Paid’ 

ELSE ‘FREE’

END AS App_Type,

avg(user_rating) AS Avg_Rating

FROM AppleStore
GROUP BY App_Type

--The findings after analyzing the data to determine whether paid apps have higher rating than free apps show that “Paid” apps have a slightly higher rating than “Free” apps within the Apple App Store. Paid apps have an average rating of 3.7 and Free apps have an average rating of 3.3.

*Check if apps with more supported languages have higher ratings*

SELECT CASE

WHEN lang_num < 10 THEN ‘<10 languages’

WHEN lang_num BETWEEN 10 AND 30 THEN ’10-30 languages’

ELSE ‘>30 languages’

END AS language_bucket
avg(user_rating) AS Avg_Rating

FROM AppleStore
GROUP BY language_bucket
ORDER BY Avg_Rating DESC

--After this data analysis we can see that the language bucket between 10-30 languages has the highest average user rating of 4.1, the language bucket with more than 30 languages has a middle average rating of 3.7 between all three language buckets and the language bucket that contains less than 10 languages has the lowest rating of 3.3. 

*Check genres with low ratings*
SELECT prime_genre,

avg(user_rating) AS Avg_Rating

FROM AppleStore
GROUP BY prime_genre
ORDER BY Avg_Rating ASC
LIMIT 10


--Upon analysis of app genres with low ratings the information returned shows that the Catalog genre, the Finance genre and the Book genres within the Apple App Store has the lowest ratings among all genres. Catalogs has an average rating of 2.1, Finance has an average rating of 2.4 and Book has an average rating of 2.47. 

*Check if there is a correlation between the length of the app description and the user rating using JOIN statement, alias and Case statement*

SELECT CASE

WHEN length(b.app_desc) >500 THEN ‘Short’
WHEN length(b.app_desc) BETWEEN 500 AND 1000 THEN ‘Medium’
ELSE ‘Long’

END AS description_length_bucket,
avg(a.user_rating) AS average_rating

FROM

AppleStore AS A

JOIN

appleStore_description_combined AS b

ON

a.id = b.id

GROUP BY description_length_bucket
ORDER BY average_rating DESC 

--The apps with a “Long” description have an average user rating of 3.8, the “Medium” app descriptions have an average user rating of 3.2 and the apps with “Short” descriptions have the lowest average user rating with a value of 2.5. This proves that there is a correlation between apps that have higher ratings with longer app descriptions. 


*Check the top-rated apps for each genre*

SELECT 
prime_genre,
track_name,
user_rating

FROM (

SELECT
prime_genre,
track_name,
user_rating,
RANK () OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) AS rank

FROM 
appleStore
) AS a

WHERE 
a.rank=1 

--The insights gathered from the data analysis of the top-rated apps for each genre reveals the highest rated specific apps based on genre. The analyzed data shows that the app “TurboScan Pro” within the Business genre, “CPlus for Craiglist” app within the Catalog genre and the “Elevate” app within the Education genre are some of the highest performing apps in the Apple App Store. 
